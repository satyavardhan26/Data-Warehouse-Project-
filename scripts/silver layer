--checking data Qulaity in crm_cust_info table in bronze layer analyzing bronze layer using below sql quries 
🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.crm_cust_info🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟
Select * From bronze.crm_cust_info;    


--CHECK FOR UNWANTED SPACES 

SELECT  cst_firstname 
FROM  bronze.crm_cust_info
WHERE  cst_firstname != TRIM(cst_firstname);


SELECT  cst_lastname 
FROM  bronze.crm_cust_info
WHERE  cst_lastname != TRIM(cst_lastname);

--Data Standardization & consistensy 

Select Distinct cst_gndr
From bronze.crm_cust_info;

Select Distinct cst_material_status
From bronze.crm_cust_info;

===========================================================================================================
--after understanding the quality of the data need to improve the quality for that Written below sql query 

🎄 
INSERT INTO silver.crm_cust_info(
	cust_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_material_status,
	cst_gndr,
	cst_create_date

)
Select 
cust_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE 
	WHEN UPPER(TRIM(cst_material_status)) = 'M' then 'Married'
	WHEN UPPER(TRIM(cst_material_status)) = 'S' then 'Single'
	ELSE 'N/A'
END cst_material_status,
CASE 
	WHEN UPPER(TRIM(cst_gndr)) = 'F' then 'Female'
	WHEN UPPER(TRIM(cst_gndr)) = 'M' then 'male'
	ELSE 'N/A'
END cst_gndr,

cst_create_date
From (
	Select *, ROW_NUMBER() OVER (PARTITION BY cust_id ORDER BY cst_create_date DESC ) as flag_last
	FROM bronze.crm_cust_info
	where cust_id IS NOT NULL 
	)t WHERE flag_last =1 
🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟




🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.crm_prd_info🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟

Select * From bronze.crm_prd_info ;

--Check For Nulls or Duplicates in Primary Key
-- Expectation : No result 

SELECT 
prd_id,
COUNT(*)
FROM bronze.crm_prd_info 
GROUP BY prd_id
HAVING COUNT(*)>1 OR prd_id IS NULL 

--check for unwanted spaces 
--Expectation : No Results 

Select prd_nm 
From bronze.crm_prd_info 
Where prd_nm != Trim(prd_nm);


--check for Nulls or Negative Numbers 
--expectation : No Results 

Select * From bronze.crm_prd_info

WHERE  prd_cost < 0 OR  prd_cost IS NULL;


--Data Standardization & consistency 

Select Distinct prd_line
From bronze.crm_prd_info;


--Check for Invalid Date Orders

Select * From bronze.crm_prd_info
Where prd_end_dt < prd_start_dt;


===========================================================================================================
--after understanding the quality of the data need to improve the quality for that Written below sql query 


IF OBJECT_ID('silver.crm_prd_info','U') IS NOT NULL 
	DROP TABLE silver.crm_prd_info;

CREATE TABLE silver.crm_prd_info(
		prd_id			INT,
		cat_id			NVARCHAR(50),
		prd_key			NVARCHAR(50),
		prd_nm			NVARCHAR(50),
		prd_cost		INT,
		prd_line		NVARCHAR(50),
		prd_start_dt	DATE,
		prd_end_dt		DATE,
		dwh_create_date DATETIME2 DEFAULT GETDATE()

);

INSERT INTO silver.crm_prd_info(
		prd_id,			
		cat_id,			
		prd_key,			
		prd_nm	,		
		prd_cost,		
		prd_line,		
		prd_start_dt,	
		prd_end_dt
		)
SELECT 
	prd_id,
	REPLACE(SUBSTRING(prd_key,1,5),'-','_' )as cat_id,
	SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key,
	prd_nm,
	ISNULL(prd_cost,0) AS prd_cost,
		CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Mountains'
			WHEN 'R' THEN 'Roads'
			WHEN 'S' THEN 'Other Sales'
			WHEN 'T' THEN 'Touring'
			ELSE 'N/A'
		END AS prd_line,

CAST(prd_start_dt AS DATE) AS prd_start_dt,

CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE )  AS prd_end_dt
	
From bronze.crm_prd_info;

🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟



🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.crm_sales_details🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟

--check For Invalid Dates 

Select 
NULLIF(sls_order_dt,0) AS sls_order_dt
From bronze.crm_sales_details
Where sls_order_dt <=0  
	OR LEN(sls_order_dt) ! = 8 
	OR sls_order_dt > 20500101 
	Or sls_order_dt < 19000101;


Select 
NULLIF(sls_due_dt,0) AS sls_due_dt
From bronze.crm_sales_details
Where sls_due_dt <=0  
	OR LEN(sls_due_dt) ! = 8 
	OR sls_due_dt > 20500101 
	Or sls_due_dt < 19000101;



Select 
NULLIF(sls_ship_dt,0) AS sls_ship_dt
From bronze.crm_sales_details
Where sls_ship_dt <=0  
	OR LEN(sls_ship_dt) ! = 8 
	OR sls_ship_dt > 20500101 
	Or sls_ship_dt < 19000101;




 

--Check for invalid Date orders 

Select * From 
	 bronze.crm_sales_details 
	 Where sls_order_dt > sls_ship_dt OR sls_order_dt > sls_ship_dt;


--Checking data consistency: Between Sales, Quantity and Price 
-->> Sales = Quantity * Price 
-->> Values must not be Null, Zero or Negative.

Select Distinct 
sls_sales AS old_sls_sales,
sls_quantity,
sls_price AS old_sls_price,

CASE  WHEN sls_sales IS NULL OR  sls_sales<= 0 OR sls_sales ! = sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
END as sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <=0
	THEN sls_sales/NULLIF(sls_quantity,0)
	ELSE sls_price 
END AS sls_price
From bronze.crm_sales_details
Where sls_sales ! = sls_quantity * sls_price 
OR  sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL 
OR sls_sales<=0 OR  sls_quantity <=0 OR sls_price<=0
ORDER BY sls_sales, sls_quantity, sls_price

============================================================================
INSERT INTO silver.crm_sales_details(
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_quantity,
	sls_sales,
	sls_price
)
SELECT 
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,

	CASE 
		WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL 
		ELSE CAST(CAST(sls_order_dt AS nvarchar) AS DATE)
	END AS sls_order_dt,

	CASE 
		WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL 
		ELSE CAST(CAST(sls_ship_dt AS nvarchar) AS DATE)
	END AS sls_ship_dt,

	CASE 
		WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL 
		ELSE CAST(CAST(sls_due_dt AS nvarchar) AS DATE)
	END AS sls_due_dt,

	sls_quantity,

	CASE  
		WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
			THEN sls_quantity * ABS(sls_price)
		ELSE sls_sales
	END AS sls_sales,

	CASE 
		WHEN sls_price IS NULL OR sls_price <= 0
			THEN sls_sales / NULLIF(sls_quantity,0)
		ELSE sls_price 
	END AS sls_price

FROM bronze.crm_sales_details;   


Select * From silver.crm_sales_details;



🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟



🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.erp_cust_az12🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟


--Indetify Out-of-Range Dates

SELECT DISTINCT 
bdate 
FROM bronze.erp_cust_az12
WHERE BDATE < '1924-01-01' OR bdate>GETDATE()

--Data Standradization & Consistency 

Select Distinct gen,
From bronze.erp_cust_az12;

============================================================================


INSERT INTO silver.erp_cust_az12(cid,bdate,gen)
Select 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4 , LEN(cid))
	ELSE cid 
END cid,
CASE WHEN bdate > GETDATE() THEN NULL 
	ELSE bdate
END AS bdate,
CASE WHEN UPPER(TRIM(gen)) IN ('F','FEMALE')THEN 'Female' 
	 WHEN UPPER(TRIM(gen)) IN ('M','MALE')THEN 'Male' 
	 ELSE 'n/a'
END AS gen

From bronze.erp_cust_az12


Select * From silver.erp_cust_az12;

🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.erp_loc_a101 🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟


Select 
cid,
cntry
From bronze.erp_loc_a101 

--Data Standardization & Consistency 

Select Distinct cntry 
From bronze.erp_loc_a101
ORDER by cntry


============================================================================

INSERT INTO silver.erp_loc_a101(cid,cntry)

Select 
REPLACE( cid, '-','') cid,
 CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	  WHEN TRIM(cntry) = ('US''USA') THEN 'United States'
	  WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
	  ELSE TRIM(cntry)
END AS
cntry
From bronze.erp_loc_a101


🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟bronze.erp_px_cat_g1v2 🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟


--check for unwanted spaces
Select * From bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat ! = TRIM(subcat) OR maintenance ! = TRIM(maintenance)

--Data Standardization & Consistency 

SELECT DISTINCT 
subcat
FROM bronze.erp_px_cat_g1v2

============================================================================


INSERT INTO Silver.erp_px_cat_g1v2
(id,cat,subcat,maintenance)
Select 
id,
cat,
subcat,
maintenance
From 
bronze.erp_px_cat_g1v2
